<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on ubIQio</title>
    <link>http://ubiqio.com/doc/</link>
    <description>Recent content in Docs on ubIQio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ubiqio.com/doc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://ubiqio.com/doc/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/README/</guid>
      <description>

&lt;h1 id=&#34;docs:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;docs&lt;/h1&gt;

&lt;p&gt;Markdown docs for Ardhat website&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Battery Operation</title>
      <link>http://ubiqio.com/doc/battery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/battery/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://ubiqio.com/media/ardhatbattside400.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; can use an optional single cell LiPo battery, and a custom 2200mAh battery that fits snugly between the shield headers is available in the &lt;a href=&#34;http://ubiqio.com/shop&#34;&gt;store&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;note warning&#34;&gt;
  &lt;p&gt;
Any cell with a standard JST-PH connector that physically fits your application may also be used, but make sure the polarity is correct before attachment.
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;battery-operation:dc4df0175cfa07cfdc9b78ac4adb3b60&#34;&gt;Battery Operation&lt;/h3&gt;

&lt;p&gt;During battery operation, &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; generates the supplies required for the Raspberry Pi and &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; peripherals from a boost converter. When the remaining battery capacity reaches 5%, the Raspberry Pi is gracefully shutdown (see below) by a power  management daemon, which is also able to schedule events, for example time-lapse image capture.  When the battery voltage reaches a critical level, all circuits are switched off to avoid damage to the battery due to over-discharging.&lt;/p&gt;

&lt;h3 id=&#34;charge-control-system:dc4df0175cfa07cfdc9b78ac4adb3b60&#34;&gt;Charge Control System&lt;/h3&gt;

&lt;p&gt;When connected to external power, the battery is charged using a constant-current /constant-voltage charge algorithm, with pre-conditioning and charge termination phases.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; will charge and maintain any single 3.7V LiPo cell attached to the industry standard 2-pin JST-PH connector.&lt;/p&gt;

&lt;p&gt;If external power is disconnected, Ardhat transitions seamlessly to battery operation, and sends a notification to the Raspberry Pi over the inter-processor communication channel.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://ubiqio.com/doc/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/configuration/</guid>
      <description>

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; has several configuration options detailed here.&lt;/p&gt;

&lt;h4 id=&#34;writing-to-hat-eeprom:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Writing to HAT eeprom&lt;/h4&gt;

&lt;p&gt;By default &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; this is enabled. To disable remove the solder jumper bridge from the CFG jumper next to the RTC output pin.&lt;/p&gt;

&lt;h4 id=&#34;arduino-shield-headers:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Arduino shield headers&lt;/h4&gt;

&lt;p&gt;As shipped, &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; does not come with headers pre installed, which gives you the option of running as a pure lightweight HAT, or as an Arduino compatible module. If you want to populate the supplied Arduino headers, a good trick to make sure you get them straight is to fit a shield to the headers &lt;em&gt;before&lt;/em&gt; soldering. Use a fine tipped iron and fine core solder (1mm).&lt;/p&gt;

&lt;h4 id=&#34;radio-antenna:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Radio antenna&lt;/h4&gt;

&lt;p&gt;If you have a radio equipped &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;, you&amp;rsquo;ll need to attach an antenna to the board.&lt;/p&gt;

&lt;div class=&#34;note warning&#34;&gt;
  &lt;p&gt;Do not load the radio driver without an antenna attached, as running the transmitter without an approriate load could cause permanent damage to the radio module&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The attach point is near the radio module, and is marked with an antenna symbol on the top side of the board. The antenna is best left straight but will also work coiled but with a small effect on RSS (Received Signal Strength). The length of wire needed depends on the radio module frequency you have selected, and &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; is supplied with a &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave antenna of appropriate length. For reference, the required antenna lengths are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;433MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 164.7mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 329.4mm&lt;/li&gt;
&lt;li&gt;full wave = 692.7mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;868MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 82.2mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 164.3mm&lt;/li&gt;
&lt;li&gt;full wave = 345.5mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;915MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 77.9mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 155.9mm&lt;/li&gt;
&lt;li&gt;full wave = 327.8mm&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://ubiqio.com/doc/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/contributing/</guid>
      <description>

&lt;p&gt;So you&amp;rsquo;ve got an awesome idea to throw into Ardhat. Great! Head over to &lt;a href=&#34;http://ubiqio.com/community&#34;&gt;the forum&lt;/a&gt; and let us know!&lt;/p&gt;

&lt;h2 id=&#34;updating-documentation:cc4aac3e9be04e0413c9520f223b493c&#34;&gt;Updating Documentation&lt;/h2&gt;

&lt;p&gt;We want the Ardhat documentation to be the best it can be. We&amp;rsquo;ve
open-sourced our docs and we welcome any pull requests if you find it
lacking.&lt;/p&gt;

&lt;p&gt;You can access the documentation for Ardhat just by clicking the pencil at the top of each document.&lt;/p&gt;

&lt;p&gt;All documentation pull requests should be directed at &lt;code&gt;master&lt;/code&gt;. Pull
requests directed at another branch will not be accepted.&lt;/p&gt;

&lt;h2 id=&#34;finally:cc4aac3e9be04e0413c9520f223b493c&#34;&gt;Finally&amp;hellip;&lt;/h2&gt;

&lt;div class=&#34;note&#34;&gt;
  &lt;h5&gt;Let us know what could be better!&lt;/h5&gt;
  &lt;p&gt;
    Both using and hacking on Ardhat should be fun, simple, and easy, so if for
    some reason you find itâ€™s a pain, please &lt;a
    href=&#34;http://ubiqio.com/community&#34;&gt;flag it&lt;/a&gt; on
    the forum describing your experience so we can make it better.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Environment Sensor</title>
      <link>http://ubiqio.com/doc/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/env/</guid>
      <description>&lt;p&gt;Environmental sensing is performed by a Bosch BME280 integrated sensor&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humidity sensor&lt;/li&gt;
&lt;li&gt;barometric pressure sensor&lt;/li&gt;
&lt;li&gt;temperature sensor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the Bosch &lt;a href=&#34;http://www.bosch-sensortec.com/de/homepage/products_3/environmental_sensors_1/bme280/bme280_1&#34;&gt;website&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The humidity sensor features an extremely fast response time which supports performance requirements for emerging applications such as context awareness, and high accuracy over a wide temperature range. The pressure sensor is an absolute barometric pressure sensor with features exceptionally high accuracy and resolution at very low noise. The integrated temperature sensor has been optimized for very low noise and high resolution. It is primarily used for temperature compensation of the pressure and humidity sensors, and can also be used for estimating ambient temperature.&amp;rdquo;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The BMP180/280 is compatible with the popular &lt;a href=&#34;https://github.com/richards-tech/RTIMULib-Arduino&#34;&gt;RTIMUlib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Ardhat-I has a BMP180 which has a altimeter and thermometer, but no humidity sensor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expansion</title>
      <link>http://ubiqio.com/doc/expansion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/expansion/</guid>
      <description>

&lt;h3 id=&#34;arduino-compatibility:636f077861fb676b2ad14870f3ad09aa&#34;&gt;Arduino Compatibility&lt;/h3&gt;

&lt;p&gt;Ardhat contains a complete Arduino Uno R3 compatible subsystem clocked at 16MHz.  Most newer technologies, including the Raspberry Pi itself,  operate at 3.3V. This can be a problem when connecting to common real world systems like servos and Smart LEDs that operate at 5V.  Ardhat has the necessary interface circuitry to act as a bridge between the 5V and 3V worlds, allowing the Raspberry Pi to connect with either system type. The Ardhat board may also be operated independently of a Raspberry Pi by powering it from either an external supply or the built in LiPo.&lt;/p&gt;

&lt;h3 id=&#34;arduino-shield-support:636f077861fb676b2ad14870f3ad09aa&#34;&gt;Arduino Shield Support&lt;/h3&gt;

&lt;p&gt;Ardhat supports all Uno compatible shields. AVR SPI is available on the ICSP header which is used by the majority of shields that require SPI.  The latest R3 features such as IOREF are included.&lt;/p&gt;

&lt;h3 id=&#34;raspberry-pi-arduino-communication:636f077861fb676b2ad14870f3ad09aa&#34;&gt;Raspberry Pi &amp;lt;&amp;gt; Arduino communication&lt;/h3&gt;

&lt;p&gt;The Raspberry Pi and Arduino can communicate over both Serial and I2C. Serial is used for the main inter-processor communication, and the Arduino can be programmed using the Arduino IDE through the Raspberry Pi serial port. DTR emulation is provided using Raspberry Pi GPIO 13.&lt;/p&gt;

&lt;p&gt;When the Raspberry Pi is active, it is the master on the  I2C bus, and is responsible for setup of the Ardhat  I2C peripherals (IMU, Altimeter, RTC).  When the Raspberry Pi is inactive, the Arduino can master the bus and interrogate the peripherals.  For example by watching the RTC, the Raspberry Pi can be started when the next crontab entry is about to come due.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub</title>
      <link>http://ubiqio.com/doc/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/github/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;&amp;rsquo;s documentation is kept on github and you can help improve it.&lt;/p&gt;

&lt;p&gt;Just click the pencil link  at the top right of any of the docs to go straight there.&lt;/p&gt;

&lt;p&gt;(You may need to clone the repo and generate a pull request).&lt;/p&gt;

&lt;p&gt;In addition, all Ardhat software is available at the &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; github repository
&lt;a href=&#34;https://github.com/Ardhat&#34;&gt;https://github.com/Ardhat&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>History</title>
      <link>http://ubiqio.com/doc/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/history/</guid>
      <description></description>
    </item>
    
    <item>
      <title>I/O usage</title>
      <link>http://ubiqio.com/doc/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/io/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; has full Arduino Shield compatibility, as well as being Raspberry Pi HAT compliant. Some of pins have a special usage in the &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; environment as detailed below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Raspberry Pi GPIO&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;I2C-SDA â€“  I2C bus for communication with RTC, IMU, ENV and Arduino&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;I2C-SCL â€“  I2C bus for communication with RTC, IMU, ENV and Arduino&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 14&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Serial RXD â€“ used for programming the Arduino with GPIO 13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 15&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Serial TXD â€“ used for programming the Arduino with GPIO 13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 18&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PiPWM â€“ connected to a 3V-5V level shifter to drive e.g. WS2811 LED strips (see &lt;strong&gt;SPARE&lt;/strong&gt; below)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO 22&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Arduino â€˜Resetâ€™ line â€“ used for programming with serial port&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID_SC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HAT EEPROM Clock â€“ used for read-writing the ArdHAT EEPROM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID_SD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HAT EEPROM Data â€“ used for read-writing the ArdHAT EEPROM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5V&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Connected to Ardhat 5V through a MOSFET switch controlled by Ardhat A3 (see below) NB even when the switch is off current can flow from the Raspberry Pi to Ardhat&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Arduino I/O&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;serial data from Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;serial data to Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Radio and peripheral Interrupt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D10&lt;/strong&gt;*&lt;/td&gt;
&lt;td&gt;Radio node SPI SS&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D11&lt;/strong&gt;*&lt;/td&gt;
&lt;td&gt;Radio node SPI MOSI&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D12&lt;/strong&gt;*&lt;/td&gt;
&lt;td&gt;Radio node SPI MISO&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;D13&lt;/strong&gt;*&lt;/td&gt;
&lt;td&gt;Radio node SPI SCK&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PowerOn/Off  to Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;I2C SDA to Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A5&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;I2C SCL to Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A6&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;External supply voltage monitor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A7&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Power/Nav Switch and LiPo  voltage  monitor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Vin&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Connected to the 2.1mm DC Jack through polarity protection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5V&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Supplied either from the Ext-&amp;gt; 5V Buck converter, or the LiPo-&amp;gt;5V Boost converter or the Raspberry Pi MicroUSB 5V supply&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3.3V&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Supplied through a 300mA linear regulator on Ardhat (NB if fitted, the radio module may consume 150mA peak during transmission bursts)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SPARE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The unused shield pin next to IOREF is the 5V level shifted O/P from GPIO18 (PiPWM) (see above)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*The above marked pins are available for use if the radio module is not fitted.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Additional&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ICSP Header&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Standard Arduino programming header can be used e.g. for burning new bootloader&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Solar&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.1&amp;rdquo; header next to ICSP can be connected to a 6V solar panel to charge the LiPo cell while Raspberry Pi is turned off and Ardhat is on sleep mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RTC Clock Out&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PCF8643 RTC can be programmed to generate a Clock O/P on the test point next to Pi GPIO26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>IMU</title>
      <link>http://ubiqio.com/doc/imu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/imu/</guid>
      <description>

&lt;h3 id=&#34;inertial-measurement-unit:53cfe453f14e91a110c18a8c31803e02&#34;&gt;(Inertial Measurement Unit)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ubiqio.com/media/mpu9250.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The IMU is connected to the I2C bus. It is is mounted at &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;&amp;rsquo;s  geographic center to avoid offset errors. It consists of an Invensense MPU9250, which provides&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3-axis accelerometer&lt;/li&gt;
&lt;li&gt;3-axis gyroscope&lt;/li&gt;
&lt;li&gt;3-axis magnetometer (compass)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://ubiqio.com/media/balbot.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;During normal operation, these devices are monitored directly by the Raspberry Pi  but in sleep mode they can be monitored by the Arduino and used to wakeup the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The MPU9250 is compatible with the popular &lt;a href=&#34;https://github.com/richards-tech/RTIMULib-Arduino&#34;&gt;RTIMUlib&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interprocessor Comms</title>
      <link>http://ubiqio.com/doc/interprocessor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/interprocessor/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-arduino-communication:7b112374fed250db8d9da63a73b64a10&#34;&gt;Raspberry Pi &amp;lt;&amp;gt; Arduino communication&lt;/h2&gt;

&lt;p&gt;The Raspberry Pi and Arduino can communicate over both Serial and I2C. Serial is used for the main inter-processor communication, and the Arduino can be programmed using the Arduino IDE through the Raspberry Pi serial port. DTR emulation is provided using Raspberry Pi GPIO 13.&lt;/p&gt;

&lt;p&gt;When the Raspberry Pi is active, it is the master on the  I2C bus, and is responsible for setup of the Ardhat  I2C peripherals (IMU, Altimeter, RTC).  When the Raspberry Pi is inactive, the Arduino can master the bus and interrogate the peripherals.  For example by watching the RTC, the Raspberry Pi can be started when the next crontab entry is about to come due.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LEDs</title>
      <link>http://ubiqio.com/doc/leds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/leds/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; supports LEDs in two ways; the first is through an onboard LED that is connected to port D9. Note that this is different from the standard Arduino port, which is D13.&lt;/p&gt;

&lt;p&gt;This was done to avoid conflict with the use of D13 for SPI_SCK, and also so that the hardware PWM function can be used, for example for pulsating the LED in sleep mode.&lt;/p&gt;

&lt;p&gt;The other form of support is through the inclusion of a 3.3V to 5V converter on the output of the Pi PWM pin, which can be used to connect WS8212 LED strings directly to Ardhat.&lt;/p&gt;

&lt;p&gt;The 5V rail can provide upto 2.5A which is sufficient to drive 4m light strings in normal use (ie not all illuminated at full brigtness)&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/Ardhat/spiralLED&#34;&gt;Spiralled&lt;/a&gt; for an example of this in use.&lt;/p&gt;

&lt;p&gt;&lt;img align=&#34;center&#34; src=&#34;http://ubiqio.com/media/SpiralLED.jpg&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mesh Radio</title>
      <link>http://ubiqio.com/doc/radio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/radio/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://ubiqio.com/media/ardhatradio400.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;long-range-wireless-node:1bd5eb89186ef6bf841b9646b5fe2314&#34;&gt;Long-range wireless node&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; includes an optional long-range wireless mesh network transceiver that operates on either 433, 868, or 915 MHz  license-free ISM (Industrial, Scientific and Medical) frequency bands. Using lower frequencies than those of the 2.4 or 5.8 GHz ISM bands enables much better coverage to be achieved especially when the nodes are within buildings.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; is available with 2 radio transceiver options. The first is compatible with the &lt;a href=&#34;http://jeelabs.org/&#34;&gt;Jeelabs&lt;/a&gt;, &lt;a href=&#34;http://lowpowerlab.com/moteino/&#34;&gt;Moteino&lt;/a&gt; and &lt;a href=&#34;http://emoncms.org/&#34;&gt;EmonCMS&lt;/a&gt; nodes and can thus enable the Raspberry Pi as a gateway or master controller.  Ardhat uses the high power verion of the HopeRF module, the RFM68HCW.&lt;/p&gt;

&lt;p&gt;The second uses the &lt;a href=&#34;https://www.lora-alliance.org/&#34;&gt;LoRaTM&lt;/a&gt; RF physical layer, a form of spread spectrum modulation that significantly increases the available link budget. This option uses the HopeRF RFM95/96W.&lt;/p&gt;

&lt;p&gt;With both options, the radio nodes are driven by the Arduino processor, so they can be maintained at very lower power, only waking up the Raspberry Pi when required.&lt;/p&gt;

&lt;p&gt;The recommended library is the the Radiohead library from &lt;a href=&#34;http://www.airspayce.com/&#34;&gt;Airspayce&lt;/a&gt;, as this supports both RFM69 and RFM95 modules. In addition, the radio manager also supports several different types of radio network configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RHDatagram Addressed&lt;/strong&gt;, unreliable variable length messages, with optional broadcast facilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RHReliableDatagram Addressed&lt;/strong&gt;, reliable, retransmitted, acknowledged variable length messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RHRouter Multi-hop&lt;/strong&gt; delivery from source node to destination node via 0 or more intermediate nodes, with manual routing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RHMesh Multi-hop&lt;/strong&gt;, delivery with automatic route discovery and rediscovery.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great documentation on the library is available &lt;a href=&#34;http://www.airspayce.com/mikem/arduino/RadioHead/index.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need at least 2 radios of course, preferably &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;s :), but you can also use &lt;a href=&#34;http://www.digitalsmarties.net/products/jeelink&#34;&gt;Jeelink&lt;/a&gt;,  &lt;a href=&#34;https://lowpowerlab.com/shop/moteino-r4&#34;&gt;Moteino&lt;/a&gt; or &lt;a href=&#34;https://oshpark.com/shared_projects/RIumMBtN&#34;&gt;Teensy&lt;/a&gt; nodes.  Prepare the Ardhat board by &lt;a href=&#34;https://ubiqio.com/doc/configuration/&#34;&gt;attaching an antenna to the board&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;note warning&#34;&gt;
  &lt;p&gt;Do not load the driver without an antenna attached, as running the transmitter without an approriate load could cause permanent damage to the radio module&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;(The antenna is best left straight but will also work coiled). For reference, the required antenna lengths are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;433MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 164.7mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 329.4mm&lt;/li&gt;
&lt;li&gt;full wave = 692.7mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;868MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 82.2mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 164.3mm&lt;/li&gt;
&lt;li&gt;full wave = 345.5mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;915MHz:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; wave = 77.9mm&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; wave = 155.9mm&lt;/li&gt;
&lt;li&gt;full wave = 327.8mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then install the Radiohead &lt;a href=&#34;https://github.com/Ardhat/Radiohead&#34;&gt;library&lt;/a&gt; into the Arduino library folder, either from the Arduino GUI Library Manager or alternatively from the console using the excellent Platformio code builder, which natively supports both &lt;a href=&#34;http://platformio.org/#!/lib/search?query=radiohead&#34;&gt;Radiohead&lt;/a&gt; and &lt;a href=&#34;http://docs.platformio.org/en/latest/platforms/atmelavr.html#boards&#34;&gt;&lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;There are a large number of examples provided with the library, but the &lt;em&gt;RF69client&lt;/em&gt; and &lt;em&gt;RF69server&lt;/em&gt; sketches are a great starting point.&lt;/p&gt;

&lt;p&gt;In both cases, you&amp;rsquo;ll need to make sure you&amp;rsquo;ve set the frequency correctly, depending on the &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt; radio module you have. Do this on the line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (!rf69.setFrequency(868)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, double check you have set the right SPI SS and Interrupt lines. In the case of Ardhat, SS is on pin D10, and the interrupt is on D3, so this means the RF69 constructor should look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Singleton instance of the radio driver
RH_RF69 rf69(10, 3); // For RF69 on Ardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load up the &lt;em&gt;RF69server.pde&lt;/em&gt; sketch on the &amp;lsquo;gateway&amp;rsquo; &lt;span style=&#34;font-family: &#39;Black Ops One&#39;, cursive; font-size:115%&#34;&gt;Ardh@t&lt;/span&gt;, and the &lt;em&gt;RF69server.pde&lt;/em&gt; sketch on the &amp;lsquo;node&amp;rsquo;. On the client, you should get replies to sent messages with a RSSI (Received Signal Strength Indication), and the activity LED will flash.&lt;/p&gt;

&lt;p&gt;Once you have a basic radio link in place you can experiment with more advanced networking topologies, such as multinode mesh.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Navigation Switch</title>
      <link>http://ubiqio.com/doc/navi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/navi/</guid>
      <description>&lt;p&gt;The navigation switch is connected to the AVR analog port A7. This port is not present on a standard Arduino, so does not affect normal sketch operation.&lt;/p&gt;

&lt;p&gt;When operated, the switch forms a potential divider from the output of the LiPo charger, as shown in the following table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Navigation Switch&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Open&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;5V (= 1024) or LiPo voltage when running on battery&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Left&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; open circuit voltage&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Right&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; open circuit voltage&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pressed&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0V&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Programming model</title>
      <link>http://ubiqio.com/doc/progmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ubiqio.com/doc/progmodel/</guid>
      <description>&lt;p&gt;Ardhat employs a future-proof programming environment ready for large distributed node networks.&lt;/p&gt;

&lt;p&gt;In principle, an application can be written in any language that can access the Raspberry Pi hardware (e.g. GPIOs, I2C, network etc). However, in an IoT environment, services are often distributed over a network whose availability cannot be guaranteed. A responsive system cannot  block while  waiting for these services to respond.&lt;/p&gt;

&lt;p&gt;JavaScriptâ€™s support of callbacks, and the availability of non-blocking app frameworks such as &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;, make it the natural choice for a web enabled system such as Ardhat.&lt;/p&gt;

&lt;p&gt;The Ardhat programming framework uses javascript in a &lt;a href=&#34;http://mean.io/#!/&#34;&gt;MEAN&lt;/a&gt; (MongoDB, Express, Angular, Node) environment, which is a set of technologies that work well together to allow the creation of distributed web-enabled applications.&lt;/p&gt;

&lt;p&gt;The main supported framework for local programming of Ardhat is &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, which is built on top of Googleâ€™s V8 javascript runtime, and is widely extensible through the use of additional libraries.  The addition of Express and AngularJs allow applications to be exposed over the web if required. Some of the key libraries are shown below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Library&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.mongodb.org/&#34;&gt;Mongodb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;noSQL database , for example to keep track of authenticated users and nodes&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;minimal node.js web application framework that provides a robust set of features for web and mobile applications&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;front-end application framework toolset for Single Page Applications&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;event-driven, non-blocking back-end javascript environment&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/jgautier/firmata&#34;&gt;firmata&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;node.js library to interact with  local Arduino running the firmata protocol (currently limited to serial port only (use of node-i2c TBD))&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/pi-gpio&#34;&gt;pi-gpio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;node.js based library to access the GPIO of the Raspberry Pi&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://socket.io/&#34;&gt;socket.io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;real-time bidirectional event-based network communication&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://mqtt.org/&#34;&gt;mqtt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;machine-to-machine (M2M)/&amp;ldquo;Internet of Things&amp;rdquo; connectivity protocol&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://mosquitto.org/&#34;&gt;mosquitto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;message broker for mqtt, supports MQTT,MQTT-SN&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://eclipse.org/ponte/&#34;&gt;ponte&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;node.js server bridges MQTT, CoAP&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/louischatriot/nedb&#34;&gt;NeDB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;lightweight MongoDB-like noSQL database for node.js&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/patchwork-toolkit/patchwork/wiki/Freeboard&#34;&gt;freeboard&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;local dashboard function&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Application-specific user flows  can be written on top of this framework using accessible app generators such as  &lt;a href=&#34;http://nodered.org/&#34;&gt;Node-Red&lt;/a&gt; or &lt;a href=&#34;http://emoncms.org/&#34;&gt;Emoncms&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;note unreleased&#34;&gt;
  &lt;h5&gt;IoT System Model &lt;/h5&gt;
&lt;/div&gt;

&lt;p&gt;The overall system model is as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ubiqio.com/media/IOTmodel.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Applications and Services may run on the Pi  (typically written in javascript), or may in part or whole be provided by a cloud service, subscribed to by the Ardhat software, eg &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt;.  Sensor node topology and authentication info is stored in a &lt;a href=&#34;https://github.com/louischatriot/nedb&#34;&gt;NeDB&lt;/a&gt; a MongoDB-like noSQL database.&lt;/p&gt;

&lt;p&gt;The Arduino RealTime code is responsible for monitoring and handling system power, realtime events,  and graceful sleep/shutdown/restart cycles of the Raspberry Pi.  It is also responsible for transmitting application information to the Wireless Sensor Nodes, for example using a simplified MQTT (MQTT-SN) over a link layer protocol such as &lt;a href=&#34;http://www.mike-stirling.com/redmine/projects/tinyhan/&#34;&gt;TinyHAN&lt;/a&gt; on top of  the relevant PHY (eg RFM96).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>